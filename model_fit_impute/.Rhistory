beta.curr = matrix(beta.store[1,],ncol=1)
XB = X%*%beta.curr
lambda.curr = lambda.store[1]
H.inv.curr = solve(H.curr)
soil.store = matrix(0,I,length(soil.miss.ind))
H.curr = exp(-dist.mat/lambda.curr) + diag(1e-8,n)
lambda.curr = lambda.store[1]
TT.curr = TT.initial
H.curr
beta.curr
lambda.curr
exp(-dist.mat/lambda.curr) + diag(1e-8,n)
H.inv.curr = solve(H.curr)
i=2
S.inv = H.inv.curr%x%solve(TT.curr)
w.fit.vec = Sample.W(y=y,locs=locs,w.vec.curr=w.fit.vec,S.inv=S.inv,XB=XB)
length(w.fit.vec)
length(w.fit.vec)/2
length(w.fit.vec)/3
colnames(IvyData)
load("~/Dropbox/Leman Research/Poison Ivy Spatial/04_22_17_cat_run_complete.Rdata")
w.initial = w.fit.store[nrow(w.fit.store),]
beta.initial = beta.store[nrow(beta.store),]
lambda.initial = lambda.store[length(lambda.store)]
TT.initial = TT.curr
rm(list= ls()[!(ls() %in% c("w.initial","beta.initial","lambda.initial","TT.initial"))])
beta.initial = beta.initial[-c(5,55,105)] # Removing FlowAcc
length(beta.initial)
################################################################################################################################
# Import and Merge the 2 Datasets
################################################################################################################################
IvyValues_PRISM = read.csv("~/Dropbox/Leman Research/Poison Ivy Spatial/IvyValues_PRISM.csv",sep=",",strip.white=TRUE)
IvyValues_all = read.csv("~/Dropbox/Leman Research/Poison Ivy Spatial/IvyValues_all_Revised.csv",sep=",",strip.white=TRUE)
IvyValues_PRISM = IvyValues_PRISM[ ,!(names(IvyValues_PRISM)) %in% names(IvyValues_all)[-2]]
IvyData = merge(IvyValues_all,IvyValues_PRISM,by="id")
################################################################################################################################
# Subset the Temperature,Precipitation, and Solar Radiation Columns
################################################################################################################################
solRad.cols = IvyData[,colnames(IvyData)%in%c("SolRad_JAN","SolRad_FEB","SolRad_MAR","SolRad_APR","SolRad_MAY","SolRad_JUN",
"SolRad_JUL","SolRad_AUG","SolRad_SEP","SolRad_OCT","SolRad_NOV","SolRad_DEC")]
tmean.cols = IvyData[,colnames(IvyData)%in%c("tmean_JAN","tmean_FEB","tmean_MAR","tmean_APR","tmean_MAY","tmean_JUN",
"tmean_JUL","tmean_AUG","tmean_SEP","tmean_OCT","tmean_NOV","tmean_DEC")]
tmin.cols = IvyData[,colnames(IvyData)%in%c("tmin_JAN","tmin_FEB","tmin_MAR","tmin_APR","tmin_MAY","tmin_JUN",
"tmin_JUL","tmin_AUG","tmin_SEP","tmin_OCT","tmin_NOV","tmin_DEC")]
tmax.cols = IvyData[,colnames(IvyData)%in%c("tmax_JAN","tmax_FEB","tmax_MAR","tmax_APR","tmax_MAY","tmax_JUN",
"tmax_JUL","tmax_AUG","tmax_SEP","tmax_OCT","tmax_NOV","tmax_DEC")]
tmin.cols = IvyData[,colnames(IvyData)%in%c("tmin_JAN","tmin_FEB","tmin_MAR","tmin_APR","tmin_MAY","tmin_JUN",
"tmin_JUL","tmin_AUG","tmin_SEP","tmin_OCT","tmin_NOV","tmin_DEC")]
ppt.cols = IvyData[,colnames(IvyData)%in%c("ppt_JAN","ppt_FEB","ppt_MAR","ppt_APR","ppt_MAY","ppt_JUN",
"ppt_JUL","ppt_AUG","ppt_SEP","ppt_OCT","ppt_NOV","ppt_DEC")]
################################################################################################################################
# Create some transformed variables
################################################################################################################################
IvyData$PI.ind = 1
IvyData$PI.ind[which(IvyData$plant_type=="A")] = 0
IvyData$PI.type = 0
IvyData$PI.type[which(IvyData$plant_type=="C")] = 1
IvyData$PI.type[which(IvyData$plant_type=="S")] = 2
IvyData$PI.type[which(IvyData$plant_type=="V")] = 3
# IvyData$PI.ind = factor(IvyData$PI.ind)
IvyData$Sin.Aspect = sin(IvyData$Aspect*pi/180)
IvyData$Cos.Aspect = cos(IvyData$Aspect*pi/180)
IvyData$tmean.growing = rowMeans(tmean.cols[,-c(1,2,11,12)])
IvyData$ppt.growing =  rowMeans(ppt.cols[,-c(1,2,11,12)])
IvyData$solRads.growing =  rowMeans(solRad.cols[,-c(1,2,11,12)])
# Rename some columns with ridiculously long names
colnames(IvyData)[which(colnames(IvyData)=="Available.Water.Storage.0.50.cm...Weighted.Average")] = "WaterStorage"
colnames(IvyData)[which(colnames(IvyData)=="Drainage.Class...Dominant.Condition")] = "DrainageClass"
colnames(IvyData)[which(colnames(IvyData)=="Bedrock.Depth...Minimum..in.")] = "BedrockDepth"
################################################################################################################################
# Code new groups for Land Cover
################################################################################################################################
IvyData$LC_describe.new = NA
IvyData$LC_describe.new[IvyData$LandCover%in%c(11,41)] = "Deciduous Forest"
IvyData$LC_describe.new[IvyData$LandCover%in%c(21,22,23)] = "Developed"
IvyData$LC_describe.new[IvyData$LandCover%in%c(42)] = "Evergreen Forest"
IvyData$LC_describe.new[IvyData$LandCover%in%c(43)] = "Mixed Forest"
IvyData$LC_describe.new[IvyData$LandCover%in%c(81,82)] = "Planted/Cultivated"
################################################################################################################################
# Code new groups for Soil Texture
################################################################################################################################
IvyData$Surface.Soil.Texture = toupper(IvyData$Surface.Soil.Texture)
IvyData$soiltexture.new = NA
IvyData$soiltexture.new[IvyData$Surface.Soil.Texture%in%c("VERY GRAVELLY SILT LOAM","VERY CHANNERY SILT LOAM","SILT LOAM",
"GRAVELLY SILT LOAM","CHANNERY SILT LOAM")] = "Silt Loam"
IvyData$soiltexture.new[IvyData$Surface.Soil.Texture%in%c("CHANNERY SILTY CLAY LOAM","SILTY CLAY LOAM")] = "Silty Clay Loam"
IvyData$soiltexture.new[IvyData$Surface.Soil.Texture%in%c("LOAM","GRAVELLY LOAM","COBBLY LOAM")] = "Loam"
IvyData$soiltexture.new[IvyData$Surface.Soil.Texture%in%c("DISTURBED")] = "Disturbed"
IvyData$soiltexture.new[IvyData$Surface.Soil.Texture%in%c("ROCK OUTCROP","ROCK OUTCROP COMPLEX")] = "Rock Outcrop"
IvyData$soiltexture.new[IvyData$Surface.Soil.Texture%in%c("SANDY LOAM","CHANNERY SANDY LOAM","COBBLY SANDY LOAM",
"VERY COBBLY SANDY LOAM","VERY GRAVELLY SANDY LOAM")] = "Sandy Loam"
IvyData$soiltexture.new[IvyData$Surface.Soil.Texture%in%c("CHANNERY FINE SANDY LOAM","COBBLY FINE SANDY LOAM",
"FINE SANDY LOAM")] = "Fine Sandy Loam"
################################################################################################################################
# Remove columns that aren't needed
################################################################################################################################
keep.cols = c("PI.type","latitude","longitude","Elevation","Curvature","SlopeDeg","Soil.Series","BedrockDepth",
"WaterStorage","Sin.Aspect","Cos.Aspect","tmean.growing","ppt.growing","solRads.growing","LC_describe.new","soiltexture.new")
model.data = IvyData[-which.max(IvyData$FlowAcc),keep.cols]
# keep.cols = c("PI.type","latitude","longitude","Elevation","FlowAcc","Curvature","SlopeDeg","Soil.Series","BedrockDepth",
#               "WaterStorage","Sin.Aspect","Cos.Aspect","tmean.growing","ppt.growing","solRads.growing","LC_describe.new","soiltexture.new")
# model.data = IvyData[,keep.cols]
# model.data = model.data[-which.max(FlowAcc),]
attach(model.data)
# plot(NA,NA,ylim=c(min(latitude),max(latitude)),xlim=c(min(longitude),max(longitude)),xlab="Longitude",ylab="Latitude")
# points(longitude[PI.type==0],latitude[PI.type==0],cex=.65,col="black")
# points(longitude[PI.type==1],latitude[PI.type==1],cex=.65,col="red")
# points(longitude[PI.type==2],latitude[PI.type==2],cex=.65,col="blue")
# points(longitude[PI.type==3],latitude[PI.type==3],cex=.65,col="green")
# head(model.data)
#
# rank(FlowAcc)
# r = rev(rank(FlowAcc))
# cols = heat.colors(length(FlowAcc))[r]
# plot(NA,NA,xlim=range(longitude),ylim=range(latitude),main="Flow Accumulation",xlab="Longitude",
#      ylab="Latitude")
# points(longitude,latitude,col=cols,pch=19,cex=.25)
# ind = which(FlowAcc%in%sort(FlowAcc)[(length(FlowAcc)-11):(length(FlowAcc))])
# text(longitude[ind],latitude[ind],labels=FlowAcc[ind],cex=.75)
dim(model.data)
dim(IvyData)
library(glmnet)
# Fit a model for Bedrock Depth missing data
missing.cols = c("BedrockDepth","WaterStorage","soiltexture.new")
MM = model.matrix(~.-1,data=model.data[,!colnames(model.data)%in%missing.cols])[,-1]
miss.ind = which(is.na(model.data$BedrockDepth))
bedrock.miss.ind = miss.ind
MM.BedrockDepth = MM[-miss.ind,]
y = model.data$BedrockDepth[-miss.ind]
cv = cv.glmnet(x=MM.BedrockDepth,y=y,alpha=1,nfolds=5)
plot(cv)
Bedrock.lasso = glmnet(x=MM.BedrockDepth,y=y,standardize=TRUE,lambda=cv$lambda.1se)
MM.new = MM.BedrockDepth[,-which(Bedrock.lasso$beta==0)]
Bedrock.fit = lm(y~.,data=as.data.frame(MM.new))
newX = MM[miss.ind,-which(Bedrock.lasso$beta==0)]
temp = predict(Bedrock.fit,as.data.frame(newX),se.fit=TRUE)
m0.bedrock = temp$fit
C0.bedrock = 3*diag(temp$se.fit)
# Fit a model for Water Storage missing data
missing.cols = c("BedrockDepth","WaterStorage","soiltexture.new","Soil.Series")
MM = model.matrix(~.-1,data=model.data[,!colnames(model.data)%in%missing.cols])[,-1]
miss.ind = which(is.na(model.data$WaterStorage))
water.miss.ind = miss.ind
MM.WaterStorage = MM[-miss.ind,]
y = model.data$WaterStorage[-miss.ind]
cv = cv.glmnet(x=MM.WaterStorage,y=y,alpha=1,nfolds=5)
plot(cv)
Water.lasso = glmnet(x=MM.WaterStorage,y=y,standardize=TRUE,lambda=cv$lambda.1se)
MM.new = MM.WaterStorage[,-which(Water.lasso$beta==0)]
WaterStorage.fit = lm(y~.,data=as.data.frame(MM.new))
newX = MM[miss.ind,-which(Water.lasso$beta==0)]
temp = predict(WaterStorage.fit,as.data.frame(newX),se.fit=TRUE)
m0.water = temp$fit
C0.water = 3*diag(temp$se.fit)
# Find proportions of each soiltexture
miss.ind = which(is.na(model.data$soiltexture.new))
soil.miss.ind = miss.ind
soil.prop = table(model.data$soiltexture.new[-miss.ind])/sum(table(model.data$soiltexture.new[-miss.ind]))
Augment.X = function(X,p)
{
n = nrow(X)
X.new = diag(1,p-1)%x%X
X.new = X.new[c(apply(matrix(1:n,ncol=1),1,function(x)seq(x,n*(p-1)+x-1,by=n))),]
return(X.new)
}
Sample.W = function(y,locs,w.vec.curr,S.inv,XB)
{
w.draw = w.vec.curr
n = length(unique(locs))
p = length(locs)/n + 1
for(j in 1:(n*(p-1)))
{
loc.ind = which(locs==locs[j])  # Tells me which elements in w.vec.curr are for this location
curr.cat = which(w.draw[loc.ind,]==w.draw[j])
w.other = matrix(w.draw[setdiff(loc.ind,j),],ncol=1)
w.star = w.draw[-j,]
tau2.w = 1/S.inv[j,j]
mu.w = XB[j,] + tcrossprod(matrix(S.inv[j,-j],nrow=1)*(-tau2.w),(w.star-XB[-j,]))
if(y[locs[j]]==curr.cat){w.draw[j,] = rtruncnorm(1,a=max(0,w.other),b=Inf,mean=mu.w,sd=sqrt(tau2.w))}
if(y[locs[j]]!=curr.cat){w.draw[j,] = rtruncnorm(1,a=-Inf,b=max(0,w.other),mean=mu.w,sd=sqrt(tau2.w))}
}
return(w.draw)
}
Sample.Beta = function(X,S.inv,w.vec,B.inv,b0)
{
XtS.inv = t(X)%*%S.inv
V = solve(XtS.inv%*%X + B.inv)
V = symmpart(V)
E = V%*%(XtS.inv%*%w.vec + B.inv%*%b0)
draw = matrix(rmvnorm(1,mean=E,sigma=V),ncol=1)
return(draw)
}
# Currently, TT is fixed!!!!!!!!!
Sample.TT = function(w.vec,XB,H.inv,C,kappa)
{
n = ncol(H.inv)
p = nrow(w.vec)/n + 1
w.mat = matrix(w.vec,n,p-1,byrow=TRUE)
mu.mat = matrix(XB,n,p-1,byrow=TRUE)
matrix.SSE = t(w.mat-mu.mat)%*%H.inv%*%(w.mat-mu.mat)
C.star = matrix.SSE + C
kappa.star = kappa + n
draw = riwish(v=kappa.star,S=C.star)
draw = matrix(c(2,1,1,1,2,1,1,1,2),3,3,byrow=TRUE)
return(list(draw=draw,matrix.SSE=matrix.SSE))
}
Sample.Lambda = function(lambda.curr,lambda.UB,step,H.curr,H.inv.curr,TT.curr,w.vec,XB,matrix.SSE)
{
n = nrow(H.curr)
p = nrow(TT.curr) + 1
w.mat = matrix(w.vec,n,p-1,byrow=TRUE)
mu.mat = matrix(XB,n,p-1,byrow=TRUE)
lambda.prop = rtruncnorm(1,mean=lambda.curr,sd=step,a=0,b=lambda.UB)
H.prop = exp((-dist.mat)/lambda.prop) + diag(1e-8,n)
H.prop.inv = solve(H.prop)
numer = ( -.5*(p-1)*determinant(H.prop,logarithm=TRUE)$modulus-.5*tr(solve(TT.curr)%*%t(w.mat-mu.mat)%*%H.prop.inv%*%(w.mat-mu.mat))
- log(pnorm(lambda.UB,mean=lambda.prop,sd=step)-pnorm(0,mean=lambda.prop,sd=step)) )
denom = ( -.5*(p-1)*determinant(H.curr,logarithm=TRUE)$modulus-.5*tr(solve(TT.curr)%*%matrix.SSE)
- log(pnorm(lambda.UB,mean=lambda.curr,sd=step)-pnorm(0,mean=lambda.curr,sd=step))  )
# matrix.SSE has H.curr.inv in it --> see TT update
if(log(runif(1))<numer-denom)
{
lambda.draw = lambda.prop
H.draw = H.prop
H.inv.draw = H.prop.inv
}else
{
lambda.draw = lambda.curr
H.draw = H.curr
H.inv.draw = H.inv.curr
}
return(list(lambda=lambda.draw,H=H.draw,H.inv=H.inv.draw))
}
Impute.Cont = function(H.inv,TT.inv,w.vec,X.nostack.miss,B,miss.ind,col.nums,m0,C0)
{
n = nrow(H.inv)
p = nrow(TT.inv) + 1
B.mat = matrix(B,ncol=p-1)
w.mat = matrix(w.vec,n,p-1,byrow=TRUE) - X.nostack.miss[,-col.nums]%*%B.mat[-col.nums,]
x = matrix(X.nostack.miss[,col.nums],ncol=1)
Bm = matrix(B.mat[col.nums,],ncol=1)
x1 = matrix(x[-miss.ind,],ncol=1)
V = solve(H.inv[miss.ind,miss.ind]*c(t(Bm)%*%TT.inv%*%Bm) + solve(C0))
E = V%*%( (H.inv[miss.ind,-miss.ind]%*%(w.mat[-miss.ind,]-x1%*%t(Bm))
+ H.inv[miss.ind,miss.ind]%*%w.mat[miss.ind,])%*%TT.inv%*%Bm + solve(C0)%*%m0)
draw = rmvnorm(1,mean=E,sigma=V)
return(draw)
}
#H.inv = H.inv.curr; TT.inv = solve(TT); w.vec = w.fit.vec;X.nostack.miss = X.nostack.miss
#B = beta; miss.inds = miss.ind; col.nums = col.nums
Impute.Cat = function(H.inv,TT.inv,w.vec,X.nostack.miss,B,miss.inds,col.nums)
# Needs to do one missing observation at a time
# col.nums tells me the columns of X.nostack that indicate categories
{
n = nrow(H.inv)
p = nrow(TT.inv) + 1
X = X.nostack.miss
B.mat = matrix(B,ncol=p-1)
B.curl = B.mat[col.nums,]
cat.ind = rep(NA,length(miss.inds))
for(i in 1:length(miss.inds))
{
curr.ind = miss.inds[i]
W.curl =  matrix(w.vec,n,p-1,byrow=TRUE) - X[,-col.nums]%*%B.mat[-col.nums,]
X.curl = X[,col.nums]
x2 = matrix(X.curl[curr.ind,],ncol=1)
X1 = X.curl[-curr.ind,]
z2 = matrix(W.curl[curr.ind,],ncol=1)
W1 = W.curl[-curr.ind,]
w2 = matrix(W.curl[curr.ind,],ncol=1)
S.21X1 = H.inv[-curr.ind,curr.ind]%*%X1
S.21W1 = H.inv[-curr.ind,curr.ind]%*%W1
log.probs = rep(NA,length(col.nums)+1)  # one for each cat in X, one for all 0's
x.options = rbind(rep(0,length(col.nums)),diag(1,length(col.nums)))
T.invB = TT.inv%*%t(B.curl)
BtT.invB = B.curl%*%T.invB
for(j in 1:nrow(x.options))
{
x2 = matrix(x.options[j,],ncol=1)
log.probs[j] = -.5*tr( x2%*%S.21X1%*%BtT.invB + t(x2%*%S.21X1)%*%BtT.invB + x2%*%H.inv[curr.ind,curr.ind]%*%t(x2)%*%BtT.invB
-2*(x2%*%S.21W1%*%T.invB + x2%*%H.inv[curr.ind,curr.ind]%*%t(w2)%*%T.invB)
)
}
my.max = which.max(log.probs)
log.denom = log.probs[my.max] + log(1+sum(exp(log.probs[-my.max]-log.probs[my.max])))
probs = exp(log.probs-log.denom)
cat.ind[i] = sample(1:nrow(x.options),size=1,prob=probs)
x.draw = x.options[cat.ind[i],]
X[curr.ind,col.nums] = x.draw
}
return(list(X=X,cat.ind=cat.ind))
}
# ###################### SCRATCH WORK
#
# W = matrix(w.vec,n,p-1,byrow=TRUE)
# log.probs2 = rep(NA,length(col.nums)+1)
# log.probs3 = log.probs2
# for(k in 1:nrow(x.options))
# {
#   X.temp = X.nostack.miss
#   X.temp[curr.ind,col.nums] = x.options[k,]
#   X.curl.temp = X.curl
#   X.curl.temp[curr.ind,] = x.options[k,]
#
#   log.probs2[k] = -.5*tr( TT.inv%*%t(W - X.temp%*%B.mat)%*%H.inv%*%(W - X.temp%*%B.mat) )
#   log.probs3[k] = -.5*( tr(TT.inv%*%t(B.curl)%*%t(X.curl.temp)%*%H.inv%*%X.curl.temp%*%B.curl
#                           - 2*(t(X.curl.temp)%*%H.inv%*%W.curl%*%TT.inv%*%t(B.curl)) )
#                           )
# }
#
# my.max = which.max(log.probs)
# log.denom = log.probs[my.max] + log(1+sum(exp(log.probs[-my.max]-log.probs[my.max])))
# my.max = which.max(log.probs2)
# log.denom2 = log.probs2[my.max] + log(1+sum(exp(log.probs2[-my.max]-log.probs2[my.max])))
# my.max = which.max(log.probs2)
# log.denom3 = log.probs3[my.max] + log(1+sum(exp(log.probs3[-my.max]-log.probs3[my.max])))
#
# probs = exp(log.probs-log.denom)
# probs2 = exp(log.probs2-log.denom2)
# probs3 = exp(log.probs3-log.denom3)
library(mvtnorm)
library(MCMCpack)
library(plgp)
# These are columns I'm choosing to remove after some variable selection
remove.cols = c("Soil.SeriesMarbleyard","Soil.SeriesOriskany",
"Soil.SeriesShelocta","soiltexture.newSilt Loam",
"soiltexture.newSilty Clay Loam")
# List the columns with missing data and find row index for missing data
missing.cols = c("BedrockDepth","WaterStorage","soiltexture.new")
missing.Bedrock = which(is.na(model.data$BedrockDepth))
missing.Water = which(is.na(model.data$WaterStorage))
missing.soiltexture = which(is.na(model.data$soiltexture.new))
# List off the categories (in the correct order) for the missing categorical variables
soiltexture.list = names(table(IvyData$soiltexture.new))
soiltexture.list = soiltexture.list[-c(6,7)]
# Copy the model data and populate the missing values with some initial values
model.data.c = model.data
model.data.c$BedrockDepth[missing.Bedrock] = m0.bedrock # Initializing missing values
model.data.c$WaterStorage[missing.Water] = m0.water # Initializing missing values
model.data.c$soiltexture.new[missing.soiltexture] = "Rock Outcrop"
# Convert the current model data into a model matrix
y = model.data$PI.type
design.mat = model.matrix(~.,data=model.data.c)[,-c(1:2)]
# Use latitude, longitude, elevation (in unit cube) to create a distance matrix
my.grid = design.mat[,1:3]
my.grid = cbind(design.mat[,1:3])
mins = apply(my.grid,2,function(c) min(c))
ranges = apply(my.grid,2,function(c) (max(c)-min(c)))
my.coord = scale(my.grid,mins,ranges)
dist.mat = as.matrix(dist(my.grid))
# Remove columns for non-selected variables
remove.ind = !colnames(design.mat)%in%remove.cols
design.mat = design.mat[,remove.ind]
# Find the column means and sds (not for categorical)
X.means = colMeans(design.mat)
X.sds = apply(design.mat,2,sd)
X.ranges = apply(design.mat,2,function(c) max(c)-min(c))
X.means[X.ranges==1] = 0
X.sds[X.ranges==1] = 1
# Scale continuous columns, but not categorical
design.mat = scale(design.mat,X.means,X.sds)
n = nrow(design.mat)
design.mat = cbind(rep(1,n),design.mat); colnames(design.mat)[1] = "Intercept"
k = ncol(design.mat)
p = max(y) + 1
m0.bedrock.scale = (m0.bedrock-X.means[which(names(X.means)=="BedrockDepth")])/
X.sds[which(names(X.sds)=="BedrockDepth")]
C0.bedrock.scale = C0.bedrock/X.sds[which(names(X.sds)=="BedrockDepth")]^2
m0.water.scale = (m0.water-X.means[which(names(X.means)=="WaterStorage")])/
X.sds[which(names(X.sds)=="WaterStorage")]
C0.water.scale = C0.water/X.sds[which(names(X.sds)=="WaterStorage")]^2
length(w.initial)
length(w.initial)/3
library(truncnorm)
library(MCMCpack)
library(mvtnorm)
library(Matrix)
library(psych)
library(abind)
X.nostack.miss = design.mat
b0.scalar = 0
B.inv.scalar = .1
lambda.UB = sqrt(2)
step = .01
I = 250000
X = Augment.X(X.nostack.miss,p)
y = PI.type
b0 = matrix(rep(b0.scalar,k*(p-1)),ncol=1)
B.inv = diag(B.inv.scalar,k*(p-1))
kappa = (p-1) + 2  # Priors on TT
C = diag(1,p-1)
locs = sort(rep(1:n,p-1))
w.fit.vec = matrix(w.initial,ncol=1)
w.fit.store = matrix(NA,I,length(w.fit.vec)); w.fit.store[1,] = w.fit.vec
beta.store = matrix(NA,I,k*(p-1)); beta.store[1,] = beta.initial
lambda.store = rep(NA,I); lambda.store[1] = lambda.initial
TT.store = matrix(NA,nrow=I,ncol=(p-1)^2); TT.store[1,] = c(TT.initial)
water.store = matrix(0,I,length(water.miss.ind))
bedrock.store = matrix(0,I,length(bedrock.miss.ind))
soil.store = matrix(0,I,length(soil.miss.ind))
beta.curr = matrix(beta.store[1,],ncol=1)
lambda.curr = lambda.store[1]
XB = X%*%beta.curr
length(XB)
length(w.fit.vec)
TT.curr = TT.initial
lambda.curr = lambda.store[1]
H.curr = exp(-dist.mat/lambda.curr) + diag(1e-8,n)
H.inv.curr = solve(H.curr)
i=2
S.inv = H.inv.curr%x%solve(TT.curr)
w.fit.vec = Sample.W(y=y,locs=locs,w.vec.curr=w.fit.vec,S.inv=S.inv,XB=XB)
w.fit.store[i,] = w.fit.vec
beta.curr = Sample.Beta(X=X,S.inv=S.inv,w.vec=w.fit.vec,B.inv=B.inv,b0=b0)
beta.store[i,] = beta.curr/sqrt(TT.curr[1,1])
XB = X%*%beta.curr
draw.list = Sample.TT(w.vec=w.fit.vec,XB=XB,H.inv=H.inv.curr,C=C,kappa=kappa)
TT.curr = draw.list$draw
matrix.SSE = draw.list$matrix.SSE
TT.store[i,] = c(TT.curr)
draw = Sample.Lambda(lambda.curr=lambda.curr,lambda.UB=lambda.UB,step=step,H.curr=H.curr,
H.inv.curr=H.inv.curr,TT.curr=TT.curr,w.vec=w.fit.vec,XB=XB,matrix.SSE=matrix.SSE)
lambda.curr = draw$lambda
lambda.store[i] = lambda.curr
H.curr = draw$H
H.inv.curr = draw$H.inv
col.nums = which(colnames(X.nostack.miss)=="WaterStorage")
draw = Impute.Cont(H.inv=H.inv.curr,TT.inv=solve(TT.curr),w.vec=w.fit.vec,
X.nostack.miss=X.nostack.miss,B=beta.curr,miss.ind=water.miss.ind,
col.nums=col.nums,m0=m0.water.scale, C0=C0.water.scale)
water.store[i,] = draw
X.nostack.miss[water.miss.ind,col.nums] = draw
X = Augment.X(X.nostack.miss,p)
col.nums = which(colnames(X.nostack.miss)=="BedrockDepth")
draw = Impute.Cont(H.inv=H.inv.curr,TT.inv=solve(TT.curr),w.vec=w.fit.vec,
X.nostack.miss=X.nostack.miss,B=beta.curr,miss.ind=bedrock.miss.ind,
col.nums=col.nums,m0=m0.bedrock.scale, C0=C0.bedrock.scale)
bedrock.store[i,] = draw
X.nostack.miss[bedrock.miss.ind,col.nums] = draw
X = Augment.X(X.nostack.miss,p)
col.nums = which(colnames(X.nostack.miss)%in%c("soiltexture.newFine Sandy Loam","soiltexture.newLoam",
"soiltexture.newRock Outcrop","soiltexture.newSandy Loam"))
draw = Impute.Cat(H.inv=H.inv.curr,TT.inv=solve(TT.curr),w.vec=w.fit.vec,X.nostack.miss=X.nostack.miss,
B=beta.curr,miss.inds=soil.miss.ind,col.nums=col.nums)
X.nostack.miss = draw$X
X = Augment.X(draw$X,p)
soil.store[i,] = draw$cat.ind
print(i)
system.time({
for(i in 2:I)
{
S.inv = H.inv.curr%x%solve(TT.curr)
# Update Latent W's
w.fit.vec = Sample.W(y=y,locs=locs,w.vec.curr=w.fit.vec,S.inv=S.inv,XB=XB)
w.fit.store[i,] = w.fit.vec
# Update Beta
beta.curr = Sample.Beta(X=X,S.inv=S.inv,w.vec=w.fit.vec,B.inv=B.inv,b0=b0)
beta.store[i,] = beta.curr/sqrt(TT.curr[1,1])
XB = X%*%beta.curr
# Update TT
draw.list = Sample.TT(w.vec=w.fit.vec,XB=XB,H.inv=H.inv.curr,C=C,kappa=kappa)
TT.curr = draw.list$draw
matrix.SSE = draw.list$matrix.SSE
TT.store[i,] = c(TT.curr)
# Update lengthscale
draw = Sample.Lambda(lambda.curr=lambda.curr,lambda.UB=lambda.UB,step=step,H.curr=H.curr,
H.inv.curr=H.inv.curr,TT.curr=TT.curr,w.vec=w.fit.vec,XB=XB,matrix.SSE=matrix.SSE)
lambda.curr = draw$lambda
lambda.store[i] = lambda.curr
H.curr = draw$H
H.inv.curr = draw$H.inv
# Impute missing values for water storage
col.nums = which(colnames(X.nostack.miss)=="WaterStorage")
draw = Impute.Cont(H.inv=H.inv.curr,TT.inv=solve(TT.curr),w.vec=w.fit.vec,
X.nostack.miss=X.nostack.miss,B=beta.curr,miss.ind=water.miss.ind,
col.nums=col.nums,m0=m0.water.scale, C0=C0.water.scale)
water.store[i,] = draw
X.nostack.miss[water.miss.ind,col.nums] = draw
X = Augment.X(X.nostack.miss,p)
# Impute missing values for bedrock depth
col.nums = which(colnames(X.nostack.miss)=="BedrockDepth")
draw = Impute.Cont(H.inv=H.inv.curr,TT.inv=solve(TT.curr),w.vec=w.fit.vec,
X.nostack.miss=X.nostack.miss,B=beta.curr,miss.ind=bedrock.miss.ind,
col.nums=col.nums,m0=m0.bedrock.scale, C0=C0.bedrock.scale)
bedrock.store[i,] = draw
X.nostack.miss[bedrock.miss.ind,col.nums] = draw
X = Augment.X(X.nostack.miss,p)
# Impute missing values for soil type
col.nums = which(colnames(X.nostack.miss)%in%c("soiltexture.newFine Sandy Loam","soiltexture.newLoam",
"soiltexture.newRock Outcrop","soiltexture.newSandy Loam"))
draw = Impute.Cat(H.inv=H.inv.curr,TT.inv=solve(TT.curr),w.vec=w.fit.vec,X.nostack.miss=X.nostack.miss,
B=beta.curr,miss.inds=soil.miss.ind,col.nums=col.nums)
X.nostack.miss = draw$X
X = Augment.X(draw$X,p)
soil.store[i,] = draw$cat.ind
print(i)
if(i%%25000==0)
{
par(mfrow=c(3,3))
for(k in 1:9)
{
plot(beta.store[20:i,k],type="l")
}
}
if(i%%25000==0)
{
file = paste("09_26_17_cat_run_",i,sep="")
path = paste("~/Dropbox/Leman Research/Poison Ivy Spatial/",file,".Rdata",sep="")
save.image(file = path)
}
}
})
